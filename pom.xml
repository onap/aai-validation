<?xml version="1.0"?>
<!--

    ============LICENSE_START=======================================================
    org.onap.aai
    ================================================================================
    Copyright (c) 2018-2019 AT&T Intellectual Property. All rights reserved.
    Copyright (c) 2018-2019 European Software Marketing Ltd.
    ================================================================================
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    ============LICENSE_END=========================================================

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.onap.aai.validation</groupId>
    <artifactId>validation</artifactId>
    <name>aai-validation</name>
    <version>1.8.0-SNAPSHOT</version>
    <parent>
        <groupId>org.onap.aai.aai-common</groupId>
        <artifactId>aai-parent</artifactId>
        <version>1.7.0</version>
    </parent>

    <properties>
        <start-class>org.onap.aai.validation.ValidationServiceApplication</start-class>
        <serverPort>9500</serverPort>
        <sslport>9501</sslport>
        <version.org.codehaus.groovy.groovy-eclipse-batch>2.4.3-01</version.org.codehaus.groovy.groovy-eclipse-batch>
        <version.org.codehaus.groovy.groovy-eclipse-compiler>2.9.2-01</version.org.codehaus.groovy.groovy-eclipse-compiler>

        <aai.oxm.target.folder>${project.build.directory}/bundleconfig/etc/oxm/</aai.oxm.target.folder>
        <docker.location>${basedir}/target</docker.location>
        <jacoco.line.coverage.limit>0.55</jacoco.line.coverage.limit>
    </properties>

    <dependencies>
        <dependency>
            <groupId>net.bytebuddy</groupId>
            <artifactId>byte-buddy</artifactId>
            <version>1.10.14</version>
        </dependency>
        <dependency>
            <groupId>net.bytebuddy</groupId>
            <artifactId>byte-buddy-agent</artifactId>
            <version>1.10.14</version>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>2.23.4</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest</artifactId>
            <version>2.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-api-mockito2</artifactId>
        </dependency>
        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-core</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <exclusion>
                    <artifactId>logback-classic</artifactId>
                    <groupId>ch.qos.logback</groupId>
                </exclusion>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-tomcat</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jetty</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
        </dependency>
        <dependency>
            <groupId>org.codehaus.groovy</groupId>
            <artifactId>groovy-all</artifactId>
            <version>2.4.17</version>
        </dependency>
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>javax.ws.rs-api</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-collections</groupId>
            <artifactId>commons-collections</artifactId>
            <version>3.2.2</version>
        </dependency>
        <dependency>
            <groupId>org.dom4j</groupId>
            <artifactId>dom4j</artifactId>
            <version>2.1.1</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-security</artifactId>
        </dependency>

		<!-- 02: Logging -->

        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </dependency>

        <dependency>
            <groupId>org.onap.aai.logging-service</groupId>
            <artifactId>logging-api</artifactId>
        </dependency>

        <dependency>
            <groupId>org.onap.aai.logging-service</groupId>
            <artifactId>common-logging</artifactId>
        </dependency>

        <dependency>
            <groupId>org.onap.aai.logging-service</groupId>
            <artifactId>eelf-logging</artifactId>
            <version>${aai.common.logging.version}</version>
        </dependency>

        <dependency>
            <groupId>com.att.eelf</groupId>
            <artifactId>eelf-core</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.powermock</groupId>
                    <artifactId>powermock-module-junit4</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.powermock</groupId>
                    <artifactId>powermock-api-mockito</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.onap.aai</groupId>
            <artifactId>rest-client</artifactId>
        </dependency>

        <dependency>
            <groupId>org.onap.dmaap.messagerouter.dmaapclient</groupId>
            <artifactId>dmaapClient</artifactId>
            <version>1.1.5</version>
        </dependency>

        <dependency>
            <groupId>org.onap.aai.event-client</groupId>
            <artifactId>event-client-dmaap</artifactId>
            <version>1.4.0</version>
        </dependency>

        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
        </dependency>

        <dependency>
            <groupId>com.jayway.jsonpath</groupId>
            <artifactId>json-path</artifactId>
        </dependency>

        <dependency>
            <groupId>commons-configuration</groupId>
            <artifactId>commons-configuration</artifactId>
        </dependency>

        <dependency>
            <groupId>jaxen</groupId>
            <artifactId>jaxen</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
        </dependency>

        <dependency>
            <groupId>org.eclipse.persistence</groupId>
            <artifactId>org.eclipse.persistence.moxy</artifactId>
        </dependency>

        <dependency>
            <groupId>org.json</groupId>
            <artifactId>json</artifactId>
        </dependency>

        <dependency>
            <groupId>org.glassfish.jersey.core</groupId>
            <artifactId>jersey-client</artifactId>
        </dependency>

        <dependency>
            <groupId>org.onap.aai.aai-common</groupId>
            <artifactId>aai-schema-ingest</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-tomcat</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.powermock</groupId>
                    <artifactId>powermock-module-junit4</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>javax.xml.bind</groupId>
            <artifactId>jaxb-api</artifactId>
        </dependency>
        <dependency>
            <groupId>com.sun.xml.bind</groupId>
            <artifactId>jaxb-core</artifactId>
        </dependency>
        <dependency>
            <groupId>com.sun.xml.bind</groupId>
            <artifactId>jaxb-impl</artifactId>
        </dependency>
        <dependency>
            <groupId>javax.activation</groupId>
            <artifactId>activation</artifactId>
            <version>1.1.1</version>
        </dependency>
    </dependencies>

    <build>
        <finalName>${project.artifactId}</finalName>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <mainClass>${start-class}</mainClass>
                    <executable>true</executable>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <compilerId>groovy-eclipse-compiler</compilerId>
                    <verbose>true</verbose>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.codehaus.groovy</groupId>
                        <artifactId>groovy-eclipse-compiler</artifactId>
                        <version>${version.org.codehaus.groovy.groovy-eclipse-compiler}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.codehaus.groovy</groupId>
                        <artifactId>groovy-eclipse-batch</artifactId>
                        <version>${version.org.codehaus.groovy.groovy-eclipse-batch}</version>
                    </dependency>
                </dependencies>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>unpack</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>unpack</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>org.onap.aai.schema-service</groupId>
                                    <artifactId>aai-schema</artifactId>
                                    <version>${aai.schema.service.version}</version>
                                    <type>jar</type>
                                    <includes>onap/oxm/**/</includes>
                                    <outputDirectory>${aai.oxm.target.folder}</outputDirectory>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.mycila</groupId>
                <artifactId>license-maven-plugin</artifactId>
                <version>3.0</version>
                <configuration>
                    <header>License.txt</header>
                    <includes>
                        <include>src/main/java/**</include>
                        <include>src/test/java/**</include>
                        <include>pom.xml</include>
                    </includes>
                    <skipExistingHeaders>true</skipExistingHeaders>
                </configuration>
                <executions>
                    <execution>
                        <goals>
							<!-- Set goal from "check" to "format" to auto update license headers -->
                            <goal>check</goal>
                        </goals>
                        <phase>validate</phase>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.0.2</version>
                <executions>
                    <execution>
                        <id>copy-docker-file</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}</outputDirectory>
                            <overwrite>true</overwrite>
                            <resources>
                                <resource>
                                    <directory>${basedir}/src/main/docker</directory>
                                    <filtering>true</filtering>
                                    <includes>
                                        <include>**/*</include>
                                    </includes>
                                </resource>
                                <resource>
                                    <directory>${basedir}/src/main/bin/</directory>
                                    <filtering>true</filtering>
                                    <includes>
                                        <include>**/*</include>
                                    </includes>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-bundleconfig</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/bundleconfig</outputDirectory>
                            <overwrite>false</overwrite>
                            <resources>
                                <resource>
                                    <directory>${basedir}/bundleconfig/</directory>
                                    <filtering>true</filtering>
                                    <includes>
                                        <include>etc/appprops/</include>
                                        <include>etc/rules/</include>
                                    </includes>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.4.11</version>
                <configuration>
                    <verbose>true</verbose>
                    <serverId>docker-hub</serverId>
                    <imageName>${docker.push.registry}/onap/${project.artifactId}</imageName>
                    <dockerDirectory>${docker.location}</dockerDirectory>
                    <imageTags>
                        <imageTag>latest</imageTag>
                    </imageTags>
                    <forceTags>true</forceTags>
                </configuration>
            </plugin>

	    <!-- once we connect aai-parent or oparent 3.0+ we can take out this
		 whole section -->

	    <plugin>
	      <groupId>org.jacoco</groupId>
	      <artifactId>jacoco-maven-plugin</artifactId>
	      <configuration>
		<!-- Note: This exclusion list should match <sonar.exclusions> property
		     above -->
		<excludes>
		  <exclude>**/gen/**</exclude>
		  <exclude>**/generated-sources/**</exclude>
		  <exclude>**/yang-gen/**</exclude>
		  <exclude>**/pax/**</exclude>
		  <exclude>org/onap/aai/babel/xml/generator/xsd/*</exclude>
		</excludes>
	      </configuration>
	      <executions>
		<!-- Prepares the property pointing to the JaCoCo runtime agent which
		     is passed as VM argument when Maven the Surefire plugin is executed. -->
		<execution>
		  <id>pre-unit-test</id>
		  <goals>
		    <goal>prepare-agent</goal>
		  </goals>
		  <configuration>
		    <!-- Sets the path to the file which contains the execution data
			 . -->
		    <destFile>${project.build.directory}/code-coverage/jacoco-ut.exec</destFile>
		    <!-- Sets the name of the property containing the settings for JaCoCo
			 runtime agent. -->
		    <propertyName>surefireArgLine</propertyName>
		  </configuration>
		</execution>
		<!-- Ensures that the code coverage report for unit tests is created
		     after unit tests have been run. -->
		<execution>
		  <id>post-unit-test</id>
		  <phase>test</phase>
		  <goals>
		    <goal>report</goal>
		  </goals>
		  <configuration>
		    <!-- Sets the path to the file which contains the execution data
			 . -->
		    <dataFile>${project.build.directory}/code-coverage/jacoco-ut.exec</dataFile>
		    <!-- Sets the output directory for the code coverage report. -->
		    <outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
		  </configuration>
		</execution>
		<execution>
		  <id>pre-integration-test</id>
		  <phase>pre-integration-test</phase>
		  <goals>
		    <goal>prepare-agent</goal>
		  </goals>
		  <configuration>
		    <!-- Sets the path to the file which contains the execution data
			 . -->
		    <destFile>${project.build.directory}/code-coverage/jacoco-it.exec</destFile>
		    <!-- Sets the name of the property containing the settings for JaCoCo
			 runtime agent. -->
		    <propertyName>failsafeArgLine</propertyName>
		  </configuration>
		</execution>
		<!-- Ensures that the code coverage report for integration tests after
		     integration tests have been run. -->
		<execution>
		  <id>post-integration-test</id>
		  <phase>post-integration-test</phase>
		  <goals>
		    <goal>report</goal>
		  </goals>
		  <configuration>
		    <!-- Sets the path to the file which contains the execution data
			 . -->
		    <dataFile>${project.build.directory}/code-coverage/jacoco-it.exec</dataFile>
		    <!-- Sets the output directory for the code coverage report. -->
		    <outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>
		  </configuration>
		</execution>
		<execution>
		  <id>default-check</id>
		  <goals>
		    <goal>check</goal>
		  </goals>
		  <configuration>
		    <dataFile>${project.build.directory}/code-coverage/jacoco-ut.exec</dataFile>
		    <rules>
		      <rule implementation="org.jacoco.maven.RuleConfiguration">
			<element>BUNDLE</element>
			<limits>
			  <limit implementation="org.jacoco.report.check.Limit">
			    <counter>LINE</counter>
			    <value>COVEREDRATIO</value>
			    <minimum>${jacoco.line.coverage.limit}</minimum>
			  </limit>
			</limits>
		      </rule>
		    </rules>
		  </configuration>
		</execution>
	      </executions>
	    </plugin>
	    <plugin>
	      <groupId>org.apache.maven.plugins</groupId>
	      <artifactId>maven-surefire-plugin</artifactId>
	      <version>3.0.0-M4</version>
	      <configuration>
		<!-- Sets the VM argument line used when unit tests are run. -->
		<argLine>${surefireArgLine}</argLine>
		<!-- Excludes integration tests when unit tests are run. -->
		<excludes>
		  <exclude>**/IT*.java</exclude>
		</excludes>
	      </configuration>
	    </plugin>
	    <plugin>
	      <groupId>org.apache.maven.plugins</groupId>
	      <artifactId>maven-failsafe-plugin</artifactId>
	      <version>3.0.0-M4</version>
	      <executions>
		<!-- Ensures that both integration-test and verify goals of the Failsafe
		     Maven plugin are executed. -->
		<execution>
		  <id>integration-tests</id>
		  <goals>
		    <goal>integration-test</goal>
		    <goal>verify</goal>
		  </goals>
		  <configuration>
		    <!-- Sets the VM argument line used when integration tests are run. -->
		    <argLine>${failsafeArgLine}</argLine>
		  </configuration>
		</execution>
	      </executions>
	    </plugin>
	    <plugin>
	      <groupId>org.sonarsource.scanner.maven</groupId>
	      <artifactId>sonar-maven-plugin</artifactId>
	      <version>${sonar.scanner.version}</version>
	    </plugin>
	    <!-- end removable sonar config -->
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>dev</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <build.profile.id>dev</build.profile.id>
				<!-- Only unit tests are run when the development profile is active -->
                <skip.integration.tests>true</skip.integration.tests>
                <skip.unit.tests>false</skip.unit.tests>
            </properties>
        </profile>
    </profiles>
</project>
